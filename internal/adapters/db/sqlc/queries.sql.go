// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one

INSERT INTO tasks 
   (user_id, parent_id, title, description, due_date, is_completed, status, priority, tags, display_order)
VALUES 
   ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING
   id, user_id, parent_id, title, description, created_at, updated_at, due_date, is_completed, status, priority, tags, display_order
`

type CreateTaskParams struct {
	UserID       int32            `json:"user_id"`
	ParentID     pgtype.Int4      `json:"parent_id"`
	Title        string           `json:"title"`
	Description  pgtype.Text      `json:"description"`
	DueDate      pgtype.Timestamp `json:"due_date"`
	IsCompleted  pgtype.Bool      `json:"is_completed"`
	Status       pgtype.Text      `json:"status"`
	Priority     pgtype.Text      `json:"priority"`
	Tags         []string         `json:"tags"`
	DisplayOrder pgtype.Int4      `json:"display_order"`
}

// Tasks ---------------------------------------------------------------
func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.UserID,
		arg.ParentID,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.IsCompleted,
		arg.Status,
		arg.Priority,
		arg.Tags,
		arg.DisplayOrder,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ParentID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DueDate,
		&i.IsCompleted,
		&i.Status,
		&i.Priority,
		&i.Tags,
		&i.DisplayOrder,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users 
   (username, email, password_hash) 
VALUES 
   ($1, $2, $3)
RETURNING 
   id, username, email, created_at, updated_at, last_login, is_active
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type CreateUserRow struct {
	ID        int32            `json:"id"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	LastLogin pgtype.Timestamp `json:"last_login"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

// Users ---------------------------------------------------------------
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.PasswordHash)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.IsActive,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks 
WHERE 
   id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getSubtasksByParentId = `-- name: GetSubtasksByParentId :many
SELECT 
   id, user_id, parent_id, title, description, created_at, updated_at, due_date, is_completed, status, priority, tags, display_order
FROM tasks
WHERE 
   parent_id = $1
ORDER BY
   display_order, created_at DESC
`

func (q *Queries) GetSubtasksByParentId(ctx context.Context, parentID pgtype.Int4) ([]Task, error) {
	rows, err := q.db.Query(ctx, getSubtasksByParentId, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ParentID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DueDate,
			&i.IsCompleted,
			&i.Status,
			&i.Priority,
			&i.Tags,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT 
   id, user_id, parent_id, title, description, created_at, updated_at, due_date, is_completed, status, priority, tags, display_order
FROM tasks 
WHERE 
   id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ParentID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DueDate,
		&i.IsCompleted,
		&i.Status,
		&i.Priority,
		&i.Tags,
		&i.DisplayOrder,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT 
   id, username, email, created_at, updated_at, last_login, is_active
FROM users
WHERE 
   id = $1
`

type GetUserByIdRow struct {
	ID        int32            `json:"id"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	LastLogin pgtype.Timestamp `json:"last_login"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.IsActive,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT 
   id, username, email, created_at, updated_at, last_login, is_active
FROM users 
WHERE 
   username = $1
`

type GetUserByUsernameRow struct {
	ID        int32            `json:"id"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	LastLogin pgtype.Timestamp `json:"last_login"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.IsActive,
	)
	return i, err
}

const listRootTasksByUserId = `-- name: ListRootTasksByUserId :many
SELECT 
   id, user_id, parent_id, title, description, created_at, updated_at, due_date, is_completed, status, priority, tags, display_order
FROM tasks
WHERE 
   user_id = $1 AND parent_id IS NULL
ORDER BY
   display_order, created_at DESC
`

func (q *Queries) ListRootTasksByUserId(ctx context.Context, userID int32) ([]Task, error) {
	rows, err := q.db.Query(ctx, listRootTasksByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ParentID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DueDate,
			&i.IsCompleted,
			&i.Status,
			&i.Priority,
			&i.Tags,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksWithSubtasksRecursive = `-- name: ListTasksWithSubtasksRecursive :many
WITH RECURSIVE task_tree AS (
    -- Base case
    SELECT 
        t.id, t.user_id, t.parent_id, t.title, t.description, t.created_at, t.updated_at, 
        t.due_date, t.is_completed, t.status, t.priority, t.tags, t.display_order
    FROM tasks t
    WHERE t.id = $1
    
    UNION ALL
    
    -- Recursive case
    SELECT 
        t.id, t.user_id, t.parent_id, t.title, t.description, t.created_at, t.updated_at, 
        t.due_date, t.is_completed, t.status, t.priority, t.tags, t.display_order
    FROM tasks t
    INNER JOIN task_tree tt ON t.parent_id = tt.id
)
SELECT 
    task_tree.id,
    task_tree.user_id,
    task_tree.parent_id,
    task_tree.title,
    task_tree.description,
    task_tree.created_at,
    task_tree.updated_at,
    task_tree.due_date,
    task_tree.is_completed,
    task_tree.status,
    task_tree.priority,
    task_tree.tags,
    task_tree.display_order
FROM task_tree
ORDER BY task_tree.display_order, task_tree.created_at DESC
`

type ListTasksWithSubtasksRecursiveRow struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	ParentID     pgtype.Int4      `json:"parent_id"`
	Title        string           `json:"title"`
	Description  pgtype.Text      `json:"description"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	DueDate      pgtype.Timestamp `json:"due_date"`
	IsCompleted  pgtype.Bool      `json:"is_completed"`
	Status       pgtype.Text      `json:"status"`
	Priority     pgtype.Text      `json:"priority"`
	Tags         []string         `json:"tags"`
	DisplayOrder pgtype.Int4      `json:"display_order"`
}

func (q *Queries) ListTasksWithSubtasksRecursive(ctx context.Context, id int32) ([]ListTasksWithSubtasksRecursiveRow, error) {
	rows, err := q.db.Query(ctx, listTasksWithSubtasksRecursive, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTasksWithSubtasksRecursiveRow
	for rows.Next() {
		var i ListTasksWithSubtasksRecursiveRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ParentID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DueDate,
			&i.IsCompleted,
			&i.Status,
			&i.Priority,
			&i.Tags,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reorderTask = `-- name: ReorderTask :exec
UPDATE tasks
SET 
   display_order = $2
WHERE 
   id = $1
`

type ReorderTaskParams struct {
	ID           int32       `json:"id"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

func (q *Queries) ReorderTask(ctx context.Context, arg ReorderTaskParams) error {
	_, err := q.db.Exec(ctx, reorderTask, arg.ID, arg.DisplayOrder)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET 
   user_id = $2, 
   parent_id = $3, 
   title = $4, 
   description = $5, 
   due_date = $6, 
   is_completed = $7, 
   status = $8, 
   priority = $9, 
   tags = $10, 
   display_order = $11
WHERE 
   id = $1
RETURNING
   id, user_id, parent_id, title, description, created_at, updated_at, due_date, is_completed, status, priority, tags, display_order
`

type UpdateTaskParams struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	ParentID     pgtype.Int4      `json:"parent_id"`
	Title        string           `json:"title"`
	Description  pgtype.Text      `json:"description"`
	DueDate      pgtype.Timestamp `json:"due_date"`
	IsCompleted  pgtype.Bool      `json:"is_completed"`
	Status       pgtype.Text      `json:"status"`
	Priority     pgtype.Text      `json:"priority"`
	Tags         []string         `json:"tags"`
	DisplayOrder pgtype.Int4      `json:"display_order"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.UserID,
		arg.ParentID,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.IsCompleted,
		arg.Status,
		arg.Priority,
		arg.Tags,
		arg.DisplayOrder,
	)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
   username = $1, email = $2, password_hash = $3, last_login = $4, is_active = $5
WHERE 
   id = $6
RETURNING 
   id, username, email, created_at, updated_at, last_login, is_active
`

type UpdateUserParams struct {
	Username     string           `json:"username"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	LastLogin    pgtype.Timestamp `json:"last_login"`
	IsActive     pgtype.Bool      `json:"is_active"`
	ID           int32            `json:"id"`
}

type UpdateUserRow struct {
	ID        int32            `json:"id"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	LastLogin pgtype.Timestamp `json:"last_login"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.LastLogin,
		arg.IsActive,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.IsActive,
	)
	return i, err
}
