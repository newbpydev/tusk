# Tusk-Go Code Quality Guidelines

## Code Refactoring
- Break down large files (>300 lines) into smaller, focused modules
- Move handler functions from app/handlers.go to dedicated handler files
- Extract task-related logic from tasks.go and timeline_tasks.go into services
- Refactor update.go into smaller, purpose-specific update handlers
- Move timeline section logic into a dedicated service package
- Use consistent error handling patterns across the codebase
- Extract repeated code blocks into reusable utility functions

## Code Organization
- Model-View-Update functions must be strictly separated
- Follow component-based architecture for UI elements
- Move UI state management to dedicated state packages
- Keep business logic in service packages, not UI components
- Organize imports in standard order: stdlib, external, internal
- Store model state in model.go, not in handler or update files
- Keep file size <300 lines when possible, never exceed 500 lines

## Optimization
- Cache expensive rendering operations
- Minimize allocations in hot paths (Update method)
- Use efficient data structures for frequently accessed data
- Implement lazy loading for timeline sections
- Optimize cursor management and visual cursor updates
- Reduce unnecessary renders when state hasn't changed
- Employ efficient string building techniques in view code

## Reusability
- Create composable components with clear responsibilities
- Define service interfaces in internal/ports
- Extract common UI patterns into shared components
- Build stateless components that accept model and return views
- Use dependency injection for services
- Create testable business logic separated from UI
- Document component usage with examples

## Go Best Practices
- Use tabs for indentation, not spaces
- Follow Go naming conventions (CamelCase for exported, camelCase for internal)
- Document all exported functions, types, and variables
- Handle errors explicitly, no panics in production code
- Write table-driven tests for all business logic
- Use interfaces for dependency injection and testing
- Follow the single responsibility principle
- Use consistent comments that begin with the function/item name

## Performance Requirements
- UI must remain responsive during intensive operations
- Update loop must complete in <16ms for 60 FPS rendering
- Network operations must be non-blocking with clear feedback
- Minimize memory usage by avoiding unnecessary allocations
- State updates must be atomic and consistent
- Preserve cursor state correctly during model updates
- Implement efficient section management with proper cursor handling

